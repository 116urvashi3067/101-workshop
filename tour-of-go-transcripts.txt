Go:
- Fast
- Fun
- Productive (Fast builds)

---

This talk:
- Interfaces
- Reflection
- Concurrency

---

Hello, world
`package main`
UTF-8 encoded

---

Interfaces:

A type implements an interface by defining the required methods

Stringers

> type World struct {}

> func (w *World) String() string {
>   return "world"
> }

---

package time

type Weekday int

const (
  Sunday Weekday = iota
  Monday
  Tuesday
  Wednesday
  Thursday
  Friday
  Saturday
)

---

package main

import (
  "fmt"
  "time"
)

func main() {
  day := time.Now().Weekday()
  fmt.Printf("Hello, %s (%d)\n", day, day)
}

---

func main() {
  start := time.Now()
  fetch("http://www.google.com/")
  fmt.Println(time.Since(start))
  fmt.Println(time.Hour + time.Since(start))
}

---

// io.Writer

package io

type Writer interface {
  Write(p []byte) (n int, err error)
}

---

No condition variables, select loops, ep hole, kq, callback functions, semaphores, mutexes
