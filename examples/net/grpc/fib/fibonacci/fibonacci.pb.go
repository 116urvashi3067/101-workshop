// Code generated by protoc-gen-go. DO NOT EDIT.
// source: fibonacci/fibonacci.proto

package fibonacci

import (
	context "context"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	empty "github.com/golang/protobuf/ptypes/empty"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type FirstNQuery struct {
	N                    int64    `protobuf:"varint,1,opt,name=n,proto3" json:"n,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *FirstNQuery) Reset()         { *m = FirstNQuery{} }
func (m *FirstNQuery) String() string { return proto.CompactTextString(m) }
func (*FirstNQuery) ProtoMessage()    {}
func (*FirstNQuery) Descriptor() ([]byte, []int) {
	return fileDescriptor_0aa9eb95b102f905, []int{0}
}

func (m *FirstNQuery) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_FirstNQuery.Unmarshal(m, b)
}
func (m *FirstNQuery) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_FirstNQuery.Marshal(b, m, deterministic)
}
func (m *FirstNQuery) XXX_Merge(src proto.Message) {
	xxx_messageInfo_FirstNQuery.Merge(m, src)
}
func (m *FirstNQuery) XXX_Size() int {
	return xxx_messageInfo_FirstNQuery.Size(m)
}
func (m *FirstNQuery) XXX_DiscardUnknown() {
	xxx_messageInfo_FirstNQuery.DiscardUnknown(m)
}

var xxx_messageInfo_FirstNQuery proto.InternalMessageInfo

func (m *FirstNQuery) GetN() int64 {
	if m != nil {
		return m.N
	}
	return 0
}

type FibonacciNumber struct {
	Value                int64    `protobuf:"varint,1,opt,name=value,proto3" json:"value,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *FibonacciNumber) Reset()         { *m = FibonacciNumber{} }
func (m *FibonacciNumber) String() string { return proto.CompactTextString(m) }
func (*FibonacciNumber) ProtoMessage()    {}
func (*FibonacciNumber) Descriptor() ([]byte, []int) {
	return fileDescriptor_0aa9eb95b102f905, []int{1}
}

func (m *FibonacciNumber) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_FibonacciNumber.Unmarshal(m, b)
}
func (m *FibonacciNumber) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_FibonacciNumber.Marshal(b, m, deterministic)
}
func (m *FibonacciNumber) XXX_Merge(src proto.Message) {
	xxx_messageInfo_FibonacciNumber.Merge(m, src)
}
func (m *FibonacciNumber) XXX_Size() int {
	return xxx_messageInfo_FibonacciNumber.Size(m)
}
func (m *FibonacciNumber) XXX_DiscardUnknown() {
	xxx_messageInfo_FibonacciNumber.DiscardUnknown(m)
}

var xxx_messageInfo_FibonacciNumber proto.InternalMessageInfo

func (m *FibonacciNumber) GetValue() int64 {
	if m != nil {
		return m.Value
	}
	return 0
}

type FirstNResponse struct {
	Values               []*FibonacciNumber `protobuf:"bytes,1,rep,name=values,proto3" json:"values,omitempty"`
	XXX_NoUnkeyedLiteral struct{}           `json:"-"`
	XXX_unrecognized     []byte             `json:"-"`
	XXX_sizecache        int32              `json:"-"`
}

func (m *FirstNResponse) Reset()         { *m = FirstNResponse{} }
func (m *FirstNResponse) String() string { return proto.CompactTextString(m) }
func (*FirstNResponse) ProtoMessage()    {}
func (*FirstNResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_0aa9eb95b102f905, []int{2}
}

func (m *FirstNResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_FirstNResponse.Unmarshal(m, b)
}
func (m *FirstNResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_FirstNResponse.Marshal(b, m, deterministic)
}
func (m *FirstNResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_FirstNResponse.Merge(m, src)
}
func (m *FirstNResponse) XXX_Size() int {
	return xxx_messageInfo_FirstNResponse.Size(m)
}
func (m *FirstNResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_FirstNResponse.DiscardUnknown(m)
}

var xxx_messageInfo_FirstNResponse proto.InternalMessageInfo

func (m *FirstNResponse) GetValues() []*FibonacciNumber {
	if m != nil {
		return m.Values
	}
	return nil
}

func init() {
	proto.RegisterType((*FirstNQuery)(nil), "fibonacci.FirstNQuery")
	proto.RegisterType((*FibonacciNumber)(nil), "fibonacci.FibonacciNumber")
	proto.RegisterType((*FirstNResponse)(nil), "fibonacci.FirstNResponse")
}

func init() {
	proto.RegisterFile("fibonacci/fibonacci.proto", fileDescriptor_0aa9eb95b102f905)
}

var fileDescriptor_0aa9eb95b102f905 = []byte{
	// 263 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x9c, 0x91, 0xc1, 0x4a, 0xc3, 0x40,
	0x10, 0x86, 0x5d, 0x8a, 0x91, 0x4c, 0x45, 0x61, 0x91, 0xd2, 0xa6, 0x07, 0x6b, 0x2e, 0xf6, 0xe2,
	0x46, 0xe2, 0x03, 0x28, 0xa2, 0xed, 0x2d, 0x60, 0xbc, 0x79, 0x4b, 0xc2, 0x74, 0x09, 0x24, 0x99,
	0xb0, 0x99, 0x88, 0x7d, 0x4b, 0x1f, 0x49, 0x9a, 0x6d, 0x52, 0x54, 0xf0, 0xe0, 0x6d, 0x77, 0xe6,
	0xe7, 0xe3, 0xff, 0x18, 0x98, 0x6d, 0xf2, 0x94, 0xaa, 0x24, 0xcb, 0xf2, 0x60, 0x78, 0xa9, 0xda,
	0x10, 0x93, 0x74, 0x87, 0x81, 0x37, 0xd7, 0x44, 0xba, 0xc0, 0xa0, 0x5b, 0xa4, 0xed, 0x26, 0xc0,
	0xb2, 0xe6, 0xad, 0xcd, 0xf9, 0x73, 0x18, 0xaf, 0x72, 0xd3, 0x70, 0xf4, 0xd2, 0xa2, 0xd9, 0xca,
	0x53, 0x10, 0xd5, 0x54, 0x2c, 0xc4, 0x72, 0x14, 0x8b, 0xca, 0xbf, 0x86, 0xf3, 0x55, 0x8f, 0x89,
	0xda, 0x32, 0x45, 0x23, 0x2f, 0xe0, 0xf8, 0x3d, 0x29, 0x5a, 0xdc, 0x87, 0xec, 0xc7, 0x7f, 0x82,
	0x33, 0x4b, 0x89, 0xb1, 0xa9, 0xa9, 0x6a, 0x50, 0x86, 0xe0, 0x74, 0xab, 0x66, 0x2a, 0x16, 0xa3,
	0xe5, 0x38, 0xf4, 0xd4, 0xa1, 0xe1, 0x0f, 0x66, 0xbc, 0x4f, 0x86, 0x9f, 0x02, 0xdc, 0x61, 0x27,
	0xef, 0xe1, 0x64, 0x8d, 0x1c, 0xe1, 0x07, 0xcb, 0x89, 0xb2, 0x0a, 0xaa, 0x57, 0x50, 0xcf, 0x3b,
	0x05, 0xef, 0x0f, 0xa8, 0x7f, 0x24, 0x1f, 0xc0, 0x5d, 0x23, 0xdb, 0x5e, 0x72, 0xf2, 0x2d, 0x3a,
	0x08, 0x7b, 0xb3, 0x5f, 0xf3, 0x5e, 0xa1, 0x23, 0x38, 0xaf, 0x6c, 0x30, 0x29, 0xff, 0xd7, 0xe0,
	0x56, 0x3c, 0x5e, 0xbd, 0x5d, 0x26, 0x85, 0x26, 0x6d, 0x72, 0x56, 0x19, 0x95, 0xbb, 0x33, 0xdd,
	0x68, 0x53, 0x67, 0x87, 0x7b, 0xa5, 0x4e, 0x87, 0xbc, 0xfb, 0x0a, 0x00, 0x00, 0xff, 0xff, 0x5f,
	0x56, 0x99, 0xe2, 0xcd, 0x01, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConnInterface

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// FibonacciClient is the client API for Fibonacci service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type FibonacciClient interface {
	GetNext(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*FibonacciNumber, error)
	GetFirstN(ctx context.Context, in *FirstNQuery, opts ...grpc.CallOption) (*FirstNResponse, error)
	Stream(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (Fibonacci_StreamClient, error)
}

type fibonacciClient struct {
	cc grpc.ClientConnInterface
}

func NewFibonacciClient(cc grpc.ClientConnInterface) FibonacciClient {
	return &fibonacciClient{cc}
}

func (c *fibonacciClient) GetNext(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*FibonacciNumber, error) {
	out := new(FibonacciNumber)
	err := c.cc.Invoke(ctx, "/fibonacci.Fibonacci/GetNext", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *fibonacciClient) GetFirstN(ctx context.Context, in *FirstNQuery, opts ...grpc.CallOption) (*FirstNResponse, error) {
	out := new(FirstNResponse)
	err := c.cc.Invoke(ctx, "/fibonacci.Fibonacci/GetFirstN", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *fibonacciClient) Stream(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (Fibonacci_StreamClient, error) {
	stream, err := c.cc.NewStream(ctx, &_Fibonacci_serviceDesc.Streams[0], "/fibonacci.Fibonacci/Stream", opts...)
	if err != nil {
		return nil, err
	}
	x := &fibonacciStreamClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Fibonacci_StreamClient interface {
	Recv() (*FibonacciNumber, error)
	grpc.ClientStream
}

type fibonacciStreamClient struct {
	grpc.ClientStream
}

func (x *fibonacciStreamClient) Recv() (*FibonacciNumber, error) {
	m := new(FibonacciNumber)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// FibonacciServer is the server API for Fibonacci service.
type FibonacciServer interface {
	GetNext(context.Context, *empty.Empty) (*FibonacciNumber, error)
	GetFirstN(context.Context, *FirstNQuery) (*FirstNResponse, error)
	Stream(*empty.Empty, Fibonacci_StreamServer) error
}

// UnimplementedFibonacciServer can be embedded to have forward compatible implementations.
type UnimplementedFibonacciServer struct {
}

func (*UnimplementedFibonacciServer) GetNext(ctx context.Context, req *empty.Empty) (*FibonacciNumber, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetNext not implemented")
}
func (*UnimplementedFibonacciServer) GetFirstN(ctx context.Context, req *FirstNQuery) (*FirstNResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetFirstN not implemented")
}
func (*UnimplementedFibonacciServer) Stream(req *empty.Empty, srv Fibonacci_StreamServer) error {
	return status.Errorf(codes.Unimplemented, "method Stream not implemented")
}

func RegisterFibonacciServer(s *grpc.Server, srv FibonacciServer) {
	s.RegisterService(&_Fibonacci_serviceDesc, srv)
}

func _Fibonacci_GetNext_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(empty.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FibonacciServer).GetNext(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/fibonacci.Fibonacci/GetNext",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FibonacciServer).GetNext(ctx, req.(*empty.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _Fibonacci_GetFirstN_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FirstNQuery)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FibonacciServer).GetFirstN(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/fibonacci.Fibonacci/GetFirstN",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FibonacciServer).GetFirstN(ctx, req.(*FirstNQuery))
	}
	return interceptor(ctx, in, info, handler)
}

func _Fibonacci_Stream_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(empty.Empty)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(FibonacciServer).Stream(m, &fibonacciStreamServer{stream})
}

type Fibonacci_StreamServer interface {
	Send(*FibonacciNumber) error
	grpc.ServerStream
}

type fibonacciStreamServer struct {
	grpc.ServerStream
}

func (x *fibonacciStreamServer) Send(m *FibonacciNumber) error {
	return x.ServerStream.SendMsg(m)
}

var _Fibonacci_serviceDesc = grpc.ServiceDesc{
	ServiceName: "fibonacci.Fibonacci",
	HandlerType: (*FibonacciServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetNext",
			Handler:    _Fibonacci_GetNext_Handler,
		},
		{
			MethodName: "GetFirstN",
			Handler:    _Fibonacci_GetFirstN_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Stream",
			Handler:       _Fibonacci_Stream_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "fibonacci/fibonacci.proto",
}
